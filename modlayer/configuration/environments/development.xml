<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<applicationID>Vind</applicationID>
	<smtp>tcp://127.0.0.1:25</smtp>
	
	<domain>http://local.vind</domain>
	<images_domain>http://local.vind</images_domain>
	<images_dir>/content/images</images_dir>

	<!-- 
	This configuration must match the frontend rewrite rule
	for this service
	-->
	<images_bucket>/content/bucket</images_bucket>

	<!-- 
	Debug configuration
	-->
	<backend_debug>1</backend_debug>
	<frontend_debug>1</frontend_debug>

	<!-- 
	Backend directory configuration
	this should match and existing directory
	-->
	<adminpath>/admin/</adminpath>

	<!-- 
	timezone will be set to date_default_timezone_set
	to work dates in php
	-->
	<timezone>America/Buenos_Aires</timezone>

	<!-- 
	Database configuration
	-->
	<database>
		<host>localhost</host>
		<dbname>vind</dbname>
		<user>root</user>
		<pass>root</pass>
	</database>

	<!-- 
		Skins configuration tell the app where to load
		the active skin.
		@lang: skin language
		@defautlt: default skin to load when there's no language choosen by the user
		name: Name of the skin
		path: path to the skin from root directory
	-->
	<skins>
		<skin lang="es" default="1">
			<name>Espa√±ol</name>
			<path>/skins/sprint</path>
		</skin>
	</skins>

	<!-- Autoload
		Allows you to set content to every page inside the <context> tag
		There use this configuration to get content from different sources:
		<content>
		@type: (mandatory) the type of source to be loaded 
			Posible values:
			1. localCall: Get content from a class running on the app
				@class: (mandatory if @type is localCall) name of the class 
				@method: (mandatory if @type is localCall) name of the method
				Optional params: If the method is expecting any parameter you can add one node for each parameter.
				<arg>: (optional) defines a parameter
					@name: name of the parameter
					@value: value of the parameter
				example: 
				<content type="localCall" class="Analytics" method="GetRanking" placeholder="ranking" xpath="null" json_decode="0">
					<arg name="filter" value="notas" />
				</content>

			2. localFile: Get content from a phisical file on the hard disk.
				@file: (mandatory if @type is localFile) path to the file from the root directory.
				examples:
				<content type="localFile" file="/content/xml/test.json" placeholder="testjson" xpath="null" json_decode="1" />
				<content type="localFile" file="/content/xml/test.xml" placeholder="testxml" xpath="null" json_decode="0" />

			3. remoteFile: Get content from an external source or URL.
				@ttl: (mandatory if @type is remoteFile) Time To Live. When using this type, the app will store the response from the URL on static a file
				and will serve the content from there until it expires.
				<remote>: (mandatory if @type is remoteFile) External URL to get the file.
					@write: (mandatory inside <remote> if @type is remoteFile) Path to the file to be created and saved.
				example:
				<content type="remoteFile" placeholder="weather" xpath="null" ttl="3600" json_decode="0">
					<remote write="/content/xml/weather.xml">http://api.wunderground.com/api/09a4ea1s0gtad569/conditions/lang:SP/q/Argentina.xml</remote>
				</content>

		@placeholder: (mandatory) name of the node to be placed inside <context> with the content. 
		@xpath: (mandatory) if the content is a xml YOU MUST specify the xpath to the node you want to add
			Default value: null
		@json_decode: (mandatory) if the content is a json object you should use this flag to use json_decode() when reading the content.
			Posible values: 0 (default value) or 1 
	-->
	<autoload>
		<content type="localCall" class="Menu" method="GetList" placeholder="menus" xpath="null" json_decode="0"/>
		<!-- <content type="remoteFile" placeholder="weather" xpath="/response/*" ttl="3600" json_decode="0">
			<remote write="/content/xml/weather.xml">http://api.wunderground.com/api/65f4ea63fb0a33cd/conditions/lang:SP/q/Argentina/Resistencia.xml</remote>
		</content> -->
	</autoload>

	<!-- Error Reporting
		Configure how you want errors to be handled.
		1. <screen> Show errors on screen. Good for development
			@enabled: true or false
		2. <email> Send error via email. Good for production environment.
			@enabled: true or false
			@destination: recipient email. You can specify more than one address separated by comma.
			@sender: email address from where it will be sended
			@sendername: Description to be filled in the Name field.
	-->
	<errorReporting>
		<screen enabled="true"/>
		<email enabled="false" destination="desarrollo@float.la" sender="noreply@modlayer.org" sendername="Club Norte Desarrollo"/>
	</errorReporting>

	<!-- Global Rewrite
		This configuration shouldn't be changed.
		It tells the app where to load general rewrite rules for backend and frontend separately.
		Rewrite rules defined modules will be considered on top of those described in these files
	-->
	<backendrules>configuration/backend.rules.xml</backendrules>
	<frontendrules>configuration/frontend.rules.xml</frontendrules>

	<!-- Initial configuration -->
	<accessLevel defaultModule="article">
		<user rol="administrator" weight="1" defaultModule="article"/>
		<user rol="editor" weight="2" defaultModule="article"/>
		<user rol="redactor" weight="3" defaultModule="article"/>
		<user rol="colaborator" weight="4" defaultModule="article"/>
		<user rol="photographer" weight="5" defaultModule="gallery"/>
	</accessLevel>
	
	<!-- Devices
		
		Keep default desktop node first.
	-->
	<devices>
		<device name="desktop" directory="desktop" default="1"/>
	</devices>

	<security>
		<encrypthash>751049267482051709205295259485125498417529152638</encrypthash>
		<datakey>VJ31Q02sd0CASdkUTi#091FD</datakey>
		<sessionname>vindcms</sessionname>
	</security>
</configuration>
